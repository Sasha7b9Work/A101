// 2022/11/15 16:06:51 (c) Aleksandr Shevchenko e-mail : Sasha7b9@tut.by
#include "defines.h"
#include "Ampermeter/FIR.h"


/*
    Filter type: Low Pass
    Filter model: Chebyshev
    Filter order: 2
    Sampling Frequency: 4 KHz
    Cut Frequency: 1.000000 KHz
    Pass band Ripple: 1.000000 dB
    Coefficents Quantization: float
    
    Z domain Zeros
    z = -1.000000 + j 0.000000
    z = -1.000000 + j 0.000000
    
    Z domain Poles
    z = -0.032032 + j -0.559413
    z = -0.032032 + j 0.559413
*/


int FIR::Step(int new_sample)
{
#define Ntap 100

    static const float FIRCoef[Ntap] = {
        -0.00062414397005771999,
        -0.00033451379948017308,
        -0.00002524417956544867,
        0.00030337689499171589,
        0.00065098117122832364,
        0.00101712030080483620,
        0.00140126637611354330,
        0.00180281284084908090,
        0.00222107577441732830,
        0.00265529554770680810,
        0.00310463884592482090,
        0.00356820105242184420,
        0.00404500898571858670,
        0.00453402398031912090,
        0.00503414530038543300,
        0.00554421387396334880,
        0.00606301633423403980,
        0.00658928935326724180,
        0.00712172425296807470,
        0.00765897187747389960,
        0.00819964771115034090,
        0.00874233722672342410,
        0.00928560144904270160,
        0.00982798272168266400,
        0.01036801066626684900,
        0.01090420832837395900,
        0.01143509850957530000,
        0.01195921029321942600,
        0.01247508578295687800,
        0.01298128708905877400,
        0.01347640362048290900,
        0.01395905977359598900,
        0.01442792315664029500,
        0.01488171356069396300,
        0.01531921299664173700,
        0.01573927728662587500,
        0.01614084996784620800,
        0.01652297970897986500,
        0.01688484319086480700,
        0.01722577672924006900,
        0.01754532236479779100,
        0.01784329890574271400,
        0.01811991826363927200,
        0.01837598944823194000,
        0.01861330673870796600,
        0.01883546920145156400,
        0.01904987440677772100,
        0.01927371357187361200,
        0.01956000995335002000,
        0.02028457987181575600,
        0.01956000995335002000,
        0.01927371357187361200,
        0.01904987440677772100,
        0.01883546920145156400,
        0.01861330673870796600,
        0.01837598944823194000,
        0.01811991826363927200,
        0.01784329890574271400,
        0.01754532236479779100,
        0.01722577672924006900,
        0.01688484319086480700,
        0.01652297970897986500,
        0.01614084996784620800,
        0.01573927728662587500,
        0.01531921299664173700,
        0.01488171356069396300,
        0.01442792315664029500,
        0.01395905977359598900,
        0.01347640362048290900,
        0.01298128708905877400,
        0.01247508578295687800,
        0.01195921029321942600,
        0.01143509850957530000,
        0.01090420832837395900,
        0.01036801066626684900,
        0.00982798272168266400,
        0.00928560144904270160,
        0.00874233722672342410,
        0.00819964771115034090,
        0.00765897187747389960,
        0.00712172425296807470,
        0.00658928935326724180,
        0.00606301633423403980,
        0.00554421387396334880,
        0.00503414530038543300,
        0.00453402398031912090,
        0.00404500898571858670,
        0.00356820105242184420,
        0.00310463884592482090,
        0.00265529554770680810,
        0.00222107577441732830,
        0.00180281284084908090,
        0.00140126637611354330,
        0.00101712030080483620,
        0.00065098117122832364,
        0.00030337689499171589,
        -0.00002524417956544867,
        -0.00033451379948017308,
        -0.00062414397005771999,
        -0.00089392674765503876
    };

    static float x[Ntap];   //input samples
    float y = 0.0;            //output sample
    int n;

    //shift the old samples
    for (n = Ntap - 1; n > 0; n--)
        x[n] = x[n - 1];

    //Calculate the new output
    x[0] = (float)new_sample;
    for (n = 0; n < Ntap; n++)
        y += FIRCoef[n] * x[n];

    return (int)y;
}
