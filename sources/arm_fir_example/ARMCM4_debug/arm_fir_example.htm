<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ARMCM4_debug\arm_fir_example.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ARMCM4_debug\arm_fir_example.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Nov 12 11:12:04 2022
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; arm_snr_f32 &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">Interrupt0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Interrupt0_Handler</a><BR>
 <LI><a href="#[f]">Interrupt1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Interrupt1_Handler</a><BR>
 <LI><a href="#[10]">Interrupt2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Interrupt2_Handler</a><BR>
 <LI><a href="#[11]">Interrupt3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">Interrupt3_Handler</a><BR>
 <LI><a href="#[12]">Interrupt4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">Interrupt4_Handler</a><BR>
 <LI><a href="#[13]">Interrupt5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">Interrupt5_Handler</a><BR>
 <LI><a href="#[14]">Interrupt6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">Interrupt6_Handler</a><BR>
 <LI><a href="#[15]">Interrupt7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">Interrupt7_Handler</a><BR>
 <LI><a href="#[16]">Interrupt8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Interrupt8_Handler</a><BR>
 <LI><a href="#[17]">Interrupt9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">Interrupt9_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[e]">Interrupt0_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[f]">Interrupt1_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[10]">Interrupt2_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[11]">Interrupt3_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[12]">Interrupt4_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[13]">Interrupt5_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[14]">Interrupt6_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[15]">Interrupt7_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[16]">Interrupt8_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[17]">Interrupt9_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[18]">SystemInit</a> from system_armcm4.o(.text) referenced from startup_armcm4.o(.text)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1b]">__main</a> from __main.o(!!!main) referenced from startup_armcm4.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d6]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[d7]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[22]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[da]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[db]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[de]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[df]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[27]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[f5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[21]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[23]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; arm_snr_f32 &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ac]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[26]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[28]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2a]"></a>arm_snr_f32</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, math_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = arm_snr_f32 &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>arm_provide_guard_bits_q15</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>arm_float_to_q12_20</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fb]"></a>arm_compare_fixed_q15</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>arm_compare_fixed_q31</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>arm_provide_guard_bits_q31</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>arm_provide_guard_bits_q7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>arm_calc_guard_bits</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, math_helper.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>arm_calc_2pow</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_apply_guard_bits
</UL>

<P><STRONG><a name="[33]"></a>arm_apply_guard_bits</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_calc_2pow
</UL>

<P><STRONG><a name="[35]"></a>arm_float_to_q14</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[36]"></a>arm_float_to_q30</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[37]"></a>arm_float_to_q29</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[38]"></a>arm_float_to_q28</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, math_helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, arm_fir_example_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; arm_snr_f32 &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_snr_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[100]"></a>arm_abs_f32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>arm_abs_f64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[51]"></a>arm_abs_q15</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q15
</UL>

<P><STRONG><a name="[53]"></a>arm_abs_q31</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q31
</UL>

<P><STRONG><a name="[101]"></a>arm_abs_q7</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>arm_add_f32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>arm_add_f64</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[103]"></a>arm_add_q15</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>arm_add_q31</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>arm_add_q7</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>arm_and_u16</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>arm_and_u32</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>arm_and_u8</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>arm_dot_prod_f32</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>arm_dot_prod_f64</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10a]"></a>arm_dot_prod_q15</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>arm_dot_prod_q31</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>arm_dot_prod_q7</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>arm_mult_f32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>arm_mult_f64</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[10e]"></a>arm_mult_q15</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>arm_mult_q31</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>arm_mult_q7</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>arm_negate_f32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>arm_negate_f64</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>

<P><STRONG><a name="[5d]"></a>arm_negate_q15</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q15
</UL>

<P><STRONG><a name="[5b]"></a>arm_negate_q31</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q31
</UL>

<P><STRONG><a name="[112]"></a>arm_negate_q7</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>arm_not_u16</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>arm_not_u32</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>arm_not_u8</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>arm_offset_f32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>arm_offset_f64</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[117]"></a>arm_offset_q15</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>arm_offset_q31</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>arm_offset_q7</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>arm_or_u16</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>arm_or_u32</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>arm_or_u8</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>arm_scale_f32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>arm_scale_f64</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[11e]"></a>arm_scale_q15</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>arm_scale_q31</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>arm_scale_q7</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>arm_shift_q15</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q15
</UL>

<P><STRONG><a name="[44]"></a>arm_shift_q31</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q31
</UL>

<P><STRONG><a name="[121]"></a>arm_shift_q7</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>arm_sub_f32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>arm_sub_f64</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, basicmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[123]"></a>arm_sub_q15</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>arm_sub_q31</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>arm_sub_q7</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>arm_xor_u16</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>arm_xor_u32</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>arm_xor_u8</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>arm_clip_f32</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>arm_clip_q31</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>arm_clip_q15</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>arm_clip_q7</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, basicmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>arm_cos_f32</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>arm_cos_q15</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>arm_cos_q31</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>arm_sin_f32</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>arm_sin_q15</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>arm_sin_q31</STRONG> (Thumb, 74 bytes, Stack size 28 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>arm_sqrt_q31</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>arm_sqrt_q15</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>arm_vexp_f32</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[4a]"></a>arm_vexp_f64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[4c]"></a>arm_vlog_f32</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[4e]"></a>arm_vlog_f64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[50]"></a>arm_divide_q15</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_abs_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q15
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_levinson_durbin_q31
</UL>

<P><STRONG><a name="[52]"></a>arm_divide_q31</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_abs_q31
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_q31
</UL>

<P><STRONG><a name="[56]"></a>arm_vlog_q31</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_scalar_log_q31
</UL>

<P><STRONG><a name="[58]"></a>arm_vlog_q15</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_scalar_log_q15
</UL>

<P><STRONG><a name="[135]"></a>arm_atan2_f32</STRONG> (Thumb, 744 bytes, Stack size 8 bytes, fastmathfunctions.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>arm_atan2_q31</STRONG> (Thumb, 1196 bytes, Stack size 56 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shift_q31
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_negate_q31
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q31
</UL>

<P><STRONG><a name="[5c]"></a>arm_atan2_q15</STRONG> (Thumb, 914 bytes, Stack size 40 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shift_q15
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_negate_q15
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q15
</UL>

<P><STRONG><a name="[5f]"></a>arm_biquad_cas_df1_32x64_init_q31</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[61]"></a>arm_biquad_cas_df1_32x64_q31</STRONG> (Thumb, 444 bytes, Stack size 144 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[136]"></a>arm_biquad_cascade_df1_f32</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>arm_biquad_cascade_df1_fast_q15</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>arm_biquad_cascade_df1_fast_q31</STRONG> (Thumb, 360 bytes, Stack size 92 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>arm_biquad_cascade_df1_init_f32</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[63]"></a>arm_biquad_cascade_df1_init_q15</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[65]"></a>arm_biquad_cascade_df1_init_q31</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[139]"></a>arm_biquad_cascade_df1_q15</STRONG> (Thumb, 864 bytes, Stack size 112 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>arm_biquad_cascade_df1_q31</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>

<P><STRONG><a name="[13a]"></a>arm_biquad_cascade_df2T_f32</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>arm_biquad_cascade_df2T_f64</STRONG> (Thumb, 326 bytes, Stack size 128 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>arm_biquad_cascade_df2T_init_f32</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[69]"></a>arm_biquad_cascade_df2T_init_f64</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[13b]"></a>arm_biquad_cascade_stereo_df2T_f32</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>arm_biquad_cascade_stereo_df2T_init_f32</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[13c]"></a>arm_conv_f32</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>arm_conv_fast_opt_q15</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[13d]"></a>arm_conv_fast_q15</STRONG> (Thumb, 2004 bytes, Stack size 116 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>arm_conv_fast_q31</STRONG> (Thumb, 1498 bytes, Stack size 108 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>arm_conv_opt_q15</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[6f]"></a>arm_conv_opt_q7</STRONG> (Thumb, 876 bytes, Stack size 120 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
</UL>

<P><STRONG><a name="[13f]"></a>arm_conv_partial_f32</STRONG> (Thumb, 588 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>arm_conv_partial_fast_opt_q15</STRONG> (Thumb, 362 bytes, Stack size 96 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[140]"></a>arm_conv_partial_fast_q15</STRONG> (Thumb, 1868 bytes, Stack size 132 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>arm_conv_partial_fast_q31</STRONG> (Thumb, 572 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>arm_conv_partial_opt_q15</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[72]"></a>arm_conv_partial_opt_q7</STRONG> (Thumb, 946 bytes, Stack size 128 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
</UL>

<P><STRONG><a name="[142]"></a>arm_conv_partial_q15</STRONG> (Thumb, 3750 bytes, Stack size 184 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>arm_conv_partial_q31</STRONG> (Thumb, 650 bytes, Stack size 96 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>arm_conv_partial_q7</STRONG> (Thumb, 540 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>arm_conv_q15</STRONG> (Thumb, 3526 bytes, Stack size 176 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>arm_conv_q31</STRONG> (Thumb, 488 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>arm_conv_q7</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>arm_correlate_f32</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>arm_correlate_f64</STRONG> (Thumb, 638 bytes, Stack size 104 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>arm_correlate_fast_opt_q15</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[149]"></a>arm_correlate_fast_q15</STRONG> (Thumb, 1894 bytes, Stack size 120 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>arm_correlate_fast_q31</STRONG> (Thumb, 1634 bytes, Stack size 112 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>arm_correlate_opt_q15</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_q15
</UL>

<P><STRONG><a name="[76]"></a>arm_correlate_opt_q7</STRONG> (Thumb, 886 bytes, Stack size 112 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fill_q15
</UL>

<P><STRONG><a name="[14b]"></a>arm_correlate_q15</STRONG> (Thumb, 3216 bytes, Stack size 184 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>arm_correlate_q31</STRONG> (Thumb, 598 bytes, Stack size 84 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>arm_correlate_q7</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>arm_fir_decimate_f32</STRONG> (Thumb, 172 bytes, Stack size 44 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>arm_fir_decimate_fast_q15</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>arm_fir_decimate_fast_q31</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>arm_fir_decimate_init_f32</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[78]"></a>arm_fir_decimate_init_q15</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[79]"></a>arm_fir_decimate_init_q31</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[151]"></a>arm_fir_decimate_q15</STRONG> (Thumb, 734 bytes, Stack size 136 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>arm_fir_decimate_q31</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>arm_fir_f32</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, filteringfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_fir_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>arm_fir_f64</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[153]"></a>arm_fir_fast_q15</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>arm_fir_fast_q31</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>arm_fir_init_f32</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, filteringfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_fir_init_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>arm_fir_init_f64</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[7c]"></a>arm_fir_init_q15</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[7d]"></a>arm_fir_init_q31</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[7e]"></a>arm_fir_init_q7</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[155]"></a>arm_fir_interpolate_f32</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>arm_fir_interpolate_init_f32</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[80]"></a>arm_fir_interpolate_init_q15</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[81]"></a>arm_fir_interpolate_init_q31</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[156]"></a>arm_fir_interpolate_q15</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>arm_fir_interpolate_q31</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>arm_fir_lattice_f32</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>arm_fir_lattice_init_f32</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[83]"></a>arm_fir_lattice_init_q15</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[84]"></a>arm_fir_lattice_init_q31</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[159]"></a>arm_fir_lattice_q15</STRONG> (Thumb, 188 bytes, Stack size 60 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>arm_fir_lattice_q31</STRONG> (Thumb, 166 bytes, Stack size 60 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>arm_fir_q15</STRONG> (Thumb, 200 bytes, Stack size 60 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>arm_fir_q31</STRONG> (Thumb, 188 bytes, Stack size 68 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>arm_fir_q7</STRONG> (Thumb, 146 bytes, Stack size 60 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>arm_fir_sparse_f32</STRONG> (Thumb, 884 bytes, Stack size 104 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>arm_fir_sparse_init_f32</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[86]"></a>arm_fir_sparse_init_q15</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[87]"></a>arm_fir_sparse_init_q31</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[88]"></a>arm_fir_sparse_init_q7</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15f]"></a>arm_fir_sparse_q15</STRONG> (Thumb, 950 bytes, Stack size 116 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>arm_fir_sparse_q31</STRONG> (Thumb, 972 bytes, Stack size 120 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>arm_fir_sparse_q7</STRONG> (Thumb, 952 bytes, Stack size 120 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>arm_iir_lattice_f32</STRONG> (Thumb, 178 bytes, Stack size 36 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>arm_iir_lattice_init_f32</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8a]"></a>arm_iir_lattice_init_q15</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8b]"></a>arm_iir_lattice_init_q31</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[163]"></a>arm_iir_lattice_q15</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>arm_iir_lattice_q31</STRONG> (Thumb, 442 bytes, Stack size 76 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>arm_lms_f32</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>arm_lms_init_f32</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8d]"></a>arm_lms_init_q15</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8e]"></a>arm_lms_init_q31</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[166]"></a>arm_lms_norm_f32</STRONG> (Thumb, 294 bytes, Stack size 36 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>arm_lms_norm_init_f32</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[90]"></a>arm_lms_norm_init_q15</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[91]"></a>arm_lms_norm_init_q31</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[167]"></a>arm_lms_norm_q15</STRONG> (Thumb, 618 bytes, Stack size 140 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>arm_lms_norm_q31</STRONG> (Thumb, 660 bytes, Stack size 160 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>

<P><STRONG><a name="[168]"></a>arm_lms_q15</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>arm_lms_q31</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>arm_levinson_durbin_f32</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, filteringfunctions.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>arm_levinson_durbin_q31</STRONG> (Thumb, 564 bytes, Stack size 96 bytes, filteringfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q15
</UL>

<P><STRONG><a name="[16b]"></a>arm_barycenter_f32</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>arm_bitonic_sort_f32</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_core_f32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[97]"></a>arm_bubble_sort_f32</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[16c]"></a>arm_copy_f32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>arm_copy_f64</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>arm_copy_q15</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_opt_q15
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_fast_opt_q15
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_partial_opt_q15
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_partial_fast_opt_q15
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_opt_q15
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_fast_opt_q15
</UL>

<P><STRONG><a name="[16e]"></a>arm_copy_q31</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>arm_copy_q7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>arm_fill_f32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>arm_fill_f64</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>arm_fill_q15</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_opt_q7
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_opt_q15
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_fast_opt_q15
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_partial_opt_q7
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_partial_opt_q15
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_partial_fast_opt_q15
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_opt_q7
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_opt_q15
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_conv_fast_opt_q15
</UL>

<P><STRONG><a name="[172]"></a>arm_fill_q31</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>arm_fill_q7</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>arm_heap_sort_f32</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[9a]"></a>arm_insertion_sort_f32</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[9d]"></a>arm_merge_sort_f32</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[174]"></a>arm_merge_sort_init_f32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>arm_quick_sort_f32</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[a1]"></a>arm_selection_sort_f32</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sort_f32
</UL>

<P><STRONG><a name="[a2]"></a>arm_sort_f32</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_selection_sort_f32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_insertion_sort_f32
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bubble_sort_f32
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[175]"></a>arm_sort_init_f32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>arm_weighted_sum_f32</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>arm_float_to_q15</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>arm_float_to_q31</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>

<P><STRONG><a name="[178]"></a>arm_float_to_q7</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>arm_q15_to_float</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>arm_q15_to_q31</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>arm_q15_to_q7</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>arm_q31_to_float</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>arm_q31_to_q15</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>arm_q31_to_q7</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>arm_q7_to_float</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>arm_q7_to_q15</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>arm_q7_to_q31</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, supportfunctions.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm4.o(.text))

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Interrupt0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Interrupt1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Interrupt2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Interrupt3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Interrupt4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Interrupt5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Interrupt6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Interrupt7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Interrupt8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Interrupt9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm4.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[183]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shift_q31
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cas_df1_32x64_q31
</UL>

<P><STRONG><a name="[184]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q31
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_norm_q31
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_q31
</UL>

<P><STRONG><a name="[185]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_divide_q31
</UL>

<P><STRONG><a name="[a5]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_selection_sort_f32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_f32
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_insertion_sort_f32
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bubble_sort_f32
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_norm_init_q15
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_init_q15
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_iir_lattice_init_q15
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_sparse_init_q7
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_sparse_init_q15
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_lattice_init_q15
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_interpolate_init_q15
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_q7
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_q15
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_init_q15
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_q15
</UL>

<P><STRONG><a name="[a7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[189]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_norm_init_q31
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_norm_init_f32
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_init_q31
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lms_init_f32
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_iir_lattice_init_q31
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_iir_lattice_init_f32
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_sparse_init_q31
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_sparse_init_f32
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_lattice_init_q31
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_lattice_init_f32
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_interpolate_init_q31
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_interpolate_init_f32
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_q31
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f64
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_init_q31
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_decimate_init_f32
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_stereo_df2T_init_f32
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df2T_init_f64
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df2T_init_f32
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_q31
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_f32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cas_df1_32x64_init_q31
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[ab]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[18f]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[29]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[191]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[193]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[4b]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vexp_f64
</UL>

<P><STRONG><a name="[49]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vexp_f32
</UL>

<P><STRONG><a name="[194]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[3c]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_abs_f64
</UL>

<P><STRONG><a name="[4f]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vlog_f64
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[2c]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_snr_f32
</UL>

<P><STRONG><a name="[4d]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vlog_f32
</UL>

<P><STRONG><a name="[195]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[b3]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[bb]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[ad]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[ba]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[af]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[b1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[bf]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[b7]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[be]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[b8]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[b6]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[bd]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_negate_f64
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[196]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[198]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[199]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[19a]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_snr_f32
</UL>

<P><STRONG><a name="[c0]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_offset_f64
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_dot_prod_f64
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_add_f64
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q28
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q29
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q30
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q14
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q12_20
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f64
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_f64
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df2T_f64
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[c3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[c8]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[c6]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[c7]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q28
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q29
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q30
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q14
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q12_20
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[c9]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q28
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q29
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q30
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q14
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q12_20
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[19b]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[ca]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[cd]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_scale_f64
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mult_f64
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_dot_prod_f64
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_snr_f32
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f64
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_correlate_f64
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df2T_f64
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[cb]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c2]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[c5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[cc]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[ce]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sub_f64
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[d0]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_snr_f32
</UL>

<P><STRONG><a name="[d1]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[20]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[19c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[19d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[c1]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_f2lz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q31
</UL>

<P><STRONG><a name="[d3]"></a>_ll_sfrom_f</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>arm_scalar_log_q31</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vlog_q31
</UL>

<P><STRONG><a name="[59]"></a>arm_scalar_log_q15</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fastmathfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_vlog_q15
</UL>

<P><STRONG><a name="[96]"></a>arm_bitonic_sort_core_f32</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitonic_sort_f32
</UL>

<P><STRONG><a name="[98]"></a>arm_heapify</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heap_sort_f32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_heapify
</UL>

<P><STRONG><a name="[9c]"></a>topDownMerge</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
</UL>

<P><STRONG><a name="[9b]"></a>arm_merge_sort_core_f32</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;topDownMerge
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_f32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_merge_sort_core_f32
</UL>

<P><STRONG><a name="[9f]"></a>arm_quick_sort_partition_f32</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
</UL>

<P><STRONG><a name="[9e]"></a>arm_quick_sort_core_f32</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, supportfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_partition_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_f32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quick_sort_core_f32
</UL>

<P><STRONG><a name="[cf]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[c4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
